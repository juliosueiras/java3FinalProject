{"repo_token":"4fCGeyDItRJVFJiFmDdWrB3LhdwUNpQip","environment":{},"git":{"head":{"id":"a5b4d09d8b59f6c15e2cff09e10abe6163d8c09b","author_name":"Julio Tain Sueiras","author_email":"juliosueiras@gmail.com","committer_name":"Julio Tain Sueiras","committer_email":"juliosueiras@gmail.com","message":"initial commit for mavenVersion\n"},"branch":"mavenVersion","remotes":[{"name":"origin","url":"git@github.com:juliosueiras/java3FinalProject.git"}]},"source_files":[{"source":"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage pricing;\n\nimport java.beans.*;\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.HashMap;\n/**\n *\n * @author junghun lee and julio tain sueiras\n */\npublic class RentalBean implements Serializable{\n    private int pickupYear;\n    private int pickupMon;\n    private int pickupDay;\n    private int pickupHour;\n    private int pickupMin;\n    private int dropoffYear;\n    private int dropoffMon;\n    private int dropoffDay;\n    private int dropoffHour;\n    private int dropoffMin;\n    private String rentalType;\n    private String cardType;\n    private String cardNumber;\n    private int customerNumber;\n    private BigDecimal taxRate;\n    private BigDecimal price;\n    private PriceSchedule priceSchedule;\n      \n    public RentalBean() {\n       \n    }\n    \n    /**\n     * method for price estimation based on business rules\n     * @return \n     */\n\n    public PriceSchedule getPriceSchedule() {\n        return priceSchedule;\n    }\n    \n    /**\n     * @return the pickupYear\n     */\n    public int getPickupYear() {\n        return pickupYear;\n    }\n\n    /**\n     * @param pickupYear the pickupYear to set\n     */\n    public void setPickupYear(int pickupYear) {\n        this.pickupYear = pickupYear;\n    }\n\n    /**\n     * @return the pickupMon\n     */\n    public int getPickupMon() {\n        return pickupMon;\n    }\n\n    /**\n     * @param pickupMon the pickupMon to set\n     */\n    public void setPickupMon(int pickupMon) {\n        this.pickupMon = pickupMon;\n    }\n\n    /**\n     * @return the pickupDay\n     */\n    public int getPickupDay() {\n        return pickupDay;\n    }\n\n    /**\n     * @param pickupDay the pickupDay to set\n     */\n    public void setPickupDay(int pickupDay) {\n            this.pickupDay = pickupDay;\n    }\n\n    /**\n     * @return the pickupHour\n     */\n    public int getPickupHour() {\n        return pickupHour;\n    }\n\n    /**\n     * @param pickupHour the pickupHour to set\n     */\n    public void setPickupHour(int pickupHour) {\n        this.pickupHour = pickupHour;\n    }\n\n    /**\n     * @return the pickupMin\n     */\n    public int getPickupMin() {\n        return pickupMin;\n    }\n\n    /**\n     * @param pickupMin the pickupMin to set\n     */\n    public void setPickupMin(int pickupMin) {\n        this.pickupMin = pickupMin;\n    }\n\n    /**\n     * @return the dropoffYear\n     */\n    public int getDropoffYear() {\n        return dropoffYear;\n    }\n\n    /**\n     * @param dropoffYear the dropoffYear to set\n     */\n    public void setDropoffYear(int dropoffYear) {\n        this.dropoffYear = dropoffYear;\n    }\n\n    /**\n     * @return the dropoffMon\n     */\n    public int getDropoffMon() {\n        return dropoffMon;\n    }\n\n    /**\n     * @param dropoffMon the dropoffMon to set\n     */\n    public void setDropoffMon(int dropoffMon) {\n        this.dropoffMon = dropoffMon;\n    }\n\n    /**\n     * @return the dropoffDay\n     */\n    public int getDropoffDay() {\n        return dropoffDay;\n    }\n\n    /**\n     * @param dropoffDay the dropoffDay to set\n     */\n    public void setDropoffDay(int dropoffDay) {\n        this.dropoffDay = dropoffDay;\n    }\n\n    /**\n     * @return the dropoffHour\n     */\n    public int getDropoffHour() {\n        return dropoffHour;\n    }\n\n    /**\n     * @param dropoffHour the dropoffHour to set\n     */\n    public void setDropoffHour(int dropoffHour) {\n        this.dropoffHour = dropoffHour;\n    }\n\n    /**\n     * @return the dropoffMin\n     */\n    public int getDropoffMin() {\n        return dropoffMin;\n    }\n\n    /**\n     * @param dropoffMin the dropoffMin to set\n     */\n    public void setDropoffMin(int dropoffMin) {\n        this.dropoffMin = dropoffMin;\n    }\n\n    /**\n     * @return the rentalType\n     */\n    public String getRentalType() {\n        return rentalType;\n    }\n\n    /**\n     * @param rentalType the rentalType to set\n     */\n    public void setRentalType(String rentalType) {\n        this.rentalType = rentalType;\n    }\n\n    /**\n     * @return the cardType\n     */\n    public String getCardType() {\n        return cardType;\n    }\n\n    /**\n     * @param cardType the cardType to set\n     */\n    public void setCardType(String cardType) {\n        this.cardType = cardType;\n    }\n\n    /**\n     * @return the cardNumber\n     */\n    public String getCardNumber() {\n        return cardNumber;\n    }\n\n    /**\n     * @param cardNumber the cardNumber to set\n     */\n    public void setCardNumber(String cardNumber) {\n        this.cardNumber = cardNumber;\n    }\n\n    /**\n     * @return the taxRate\n     */\n    public BigDecimal getTaxRate() {\n        return taxRate;\n    }\n\n    /**\n     * @param taxRate the taxRate to set\n     */\n    public void setTaxRate(BigDecimal taxRate) {\n        this.taxRate = taxRate;\n    }\n\n    /**\n     * @return the price\n     */\n    public BigDecimal getPrice() {\n       double resultPrice = 0.00;\n        int weekdays=0;\n        int weekends=0;\n\n        if(getDropoffDay() - getPickupDay() >= 5){\n            resultPrice = priceSchedule.getWeeklyRate().doubleValue()*(getDropoffDay() - getPickupDay());\n\n        }else if((getPickupDay()+1 == getDropoffDay()) && (getPickupHour() > getDropoffHour())){\n            if(isPickupDateWeekend()){\n                resultPrice = priceSchedule.getWeekendRate().doubleValue();\n            }else{\n                resultPrice = priceSchedule.getWeekdayRate().doubleValue();\n            }\n        }else{\n            if(isPickupDateWeekend()){\n                weekends++;\n            }else{\n                weekdays++;\n            }\n\n            if(isDropoffDateWeekend()){\n                if(getDropOffDayOfWeek() != 7){\n                    weekends++;\n                }\n            }else{\n                weekdays++;\n            }\n\n            for(int dayOfWeek = getPickUpDayOfWeek() +1, i = 1; i < getDropoffDay() - getPickupDay(); i++) {\n                if(dayOfWeek == 7){\n                    dayOfWeek=1;\n                    continue;\n                }else if(dayOfWeek == 5 || dayOfWeek == 6){\n                    weekends++;\n                }else{\n                    weekdays++;\n                }\n                dayOfWeek++;\n            }\n\n            resultPrice = priceSchedule.getWeekdayRate().doubleValue()*weekdays + priceSchedule.getWeekendRate().doubleValue()*weekends;\n        }\n        return new BigDecimal(resultPrice);\n    }\n\n    /**\n     * @param price the price to set\n     */\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    /**\n     * @param priceSchedule the priceSchedule to set\n     */\n    public void setPriceSchedule(PriceSchedule priceSchedule) {\n        this.priceSchedule = priceSchedule;\n    }   \n\n    public int getCustomerNumber() {\n        return customerNumber;\n    }\n\n    public void setCustomerNumber(int customerNumber) {\n        this.customerNumber = customerNumber;\n    }\n\n    public Calendar getPickupDate(){\n        Calendar cPickUp = Calendar.getInstance();\n        cPickUp.set(getPickupYear(),getPickupMon()-1,getPickupDay()-1);\n        return cPickUp;\n\n    }\n\n    public Calendar getDropoffDate(){\n        Calendar cDropOff = Calendar.getInstance();\n        cDropOff.set(getDropoffYear(),getDropoffMon()-1,getDropoffDay()-1);\n        return cDropOff;\n    }\n\n    public Boolean isPickupDateWeekend(){\n        return (getPickUpDayOfWeek() == 5 && getPickupHour() >= 7)\n                || getPickUpDayOfWeek() == 6\n                || getPickUpDayOfWeek() == 7\n                || (getPickUpDayOfWeek() == 1 && getPickupHour() <= 11);\n    }\n\n    public int getPickUpDayOfWeek() {\n        return getPickupDate().get(Calendar.DAY_OF_WEEK);\n    }\n\n    public Boolean isDropoffDateWeekend(){\n        return (getDropOffDayOfWeek() == 5 && getDropoffHour() >= 7)\n                || getDropOffDayOfWeek() == 6\n                || getDropOffDayOfWeek() == 7\n                || (getDropOffDayOfWeek() == 1 && getDropoffHour() <= 11);\n    }\n\n    public int getDropOffDayOfWeek() {\n        return getDropoffDate().get(Calendar.DAY_OF_WEEK);\n    }\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,1,1,null,1,0,null,1,0,0,null,0,null,null,1,0,null,1,null,null,1,1,1,null,null,0,null,null,1,1,1,1,1,1,null,0,null,1,null,null,1,null,1,null,null,null,null,null,null,0,0,null,null,null,null,null,1,1,null,null,1,null,null,null,1,1,null,null,1,1,1,null,null,null,null,1,1,1,null,null,null,1,1,1,1,null,null,null,1,null,null,null,1,1,1,1,null,null,null,1,null,null,null],"name":"src/main/java/pricing/RentalBean.java"},{"source":"package pricing;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n *\n * @author junghun lee and julio tain sueiras\n */\n@WebServlet(urlPatterns = {\"/ValidationTest\"})\npublic class ValidationTest extends HttpServlet {\n\n    /**\n     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>\n     * methods.\n     *\n     * @param request servlet request\n     * @param response servlet response\n     * @throws ServletException if a servlet-specific error occurs\n     * @throws IOException if an I/O error occurs\n     */\n    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        \n        RentalFormValidator formValidator = new RentalFormValidator(request);\n        boolean validation = formValidator.isValid();\n        ArrayList<Integer> errorList = formValidator.getErrorCodes();\n        RentalBean bean = new RentalBean();\n        bean.setCustomerNumber(Integer.parseInt(request.getParameter(\"customerNo\")));\n        bean.setPickupHour(Integer.parseInt(request.getParameter(\"pickupHour\")));\n        bean.setPickupDay(Integer.parseInt(request.getParameter(\"pickupDay\")));\n        bean.setPickupMon(Integer.parseInt(request.getParameter(\"pickupMonth\")));\n        bean.setPickupYear(Integer.parseInt(request.getParameter(\"pickupYear\")));\n        bean.setDropoffHour(Integer.parseInt(request.getParameter(\"dropoffHour\")));\n        bean.setDropoffDay(Integer.parseInt(request.getParameter(\"dropoffDay\")));\n        bean.setDropoffMon(Integer.parseInt(request.getParameter(\"dropoffMonth\")));\n        bean.setDropoffYear(Integer.parseInt(request.getParameter(\"dropoffYear\")));\n        bean.setRentalType(request.getParameter(\"carType\"));\n        bean.setCardType(request.getParameter(\"cardType\"));\n        bean.setCardNumber(request.getParameter(\"creditCardNo\"));\n\n\n        response.setContentType(\"text/html;charset=UTF-8\");\n        try (PrintWriter out = response.getWriter()) {\n            /* TODO output your page here. You may use following sample code. */\n            out.println(\"<!DOCTYPE html>\");\n            out.println(\"<html>\");\n            out.println(\"<head>\");\n            out.println(\"<title>Servlet ValidationTest</title>\");            \n            out.println(\"</head>\");\n            out.println(\"<body>\");\n            out.println(\"<h1>Servlet ValidationTest at \" + request.getContextPath() + \"</h1>\");\n            out.println(\"<h1>validation: \"+validation+\"</h1>\");\n            out.println(bean.getCustomerNumber()+\" \"+bean.getPickupHour()+\" \"+bean.getPickupDay()+\" \"+bean.getPickupMon()+\" \"+bean.getPickupYear());\n            for(int error : errorList){\n                out.println(\"error code: \"+error+\"<br>\");\n            }\n            out.println(\"</body>\");\n            out.println(\"</html>\");\n        }\n    }\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"HttpServlet methods. Click on the + sign on the left to edit the code.\">\n    /**\n     * Handles the HTTP <code>GET</code> method.\n     *\n     * @param request servlet request\n     * @param response servlet response\n     * @throws ServletException if a servlet-specific error occurs\n     * @throws IOException if an I/O error occurs\n     */\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n\n    /**\n     * Handles the HTTP <code>POST</code> method.\n     *\n     * @param request servlet request\n     * @param response servlet response\n     * @throws ServletException if a servlet-specific error occurs\n     * @throws IOException if an I/O error occurs\n     */\n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        processRequest(request, response);\n    }\n\n    /**\n     * Returns a short description of the servlet.\n     *\n     * @return a String containing servlet description\n     */\n    @Override\n    public String getServletInfo() {\n        return \"Short description\";\n    }// </editor-fold>\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null],"name":"src/main/java/pricing/ValidationTest.java"},{"source":"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage pricing;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.omg.PortableInterceptor.SYSTEM_EXCEPTION;\n\n/**\n *\n * @author junghun lee and julio tain sueiras\n */\npublic class RentalFormValidator {\n\n    private HttpServletRequest formRequest;\n    private ArrayList<Integer> errorCodes;\n    private RentalBean bean = new RentalBean();\n\n    public RentalFormValidator(HttpServletRequest formRequest) {\n        this.formRequest = formRequest;\n        this.errorCodes = new ArrayList<Integer>();\n    }\n\n    public boolean isValid() {\n        boolean valid = true;\n\n        if (isCustomerNull()) {\n            valid = false;\n        }\n        if (!isCustomerNumeric()) {\n            valid = false;\n        } else {\n            bean.setCustomerNumber(Integer.parseInt(formRequest.getParameter(\"customerNo\")));\n        }\n        if (isPickupDayNull()) {\n            valid = false;\n        }\n        if (!isPickupDayInRange()) {\n            valid = false;\n        } else {\n            bean.setPickupDay(Integer.parseInt(formRequest.getParameter(\"pickupDay\")));\n        }\n        if (isPickupMonthNull()) {\n            valid = false;\n        }\n        if (!isPickupMonthInRange()) {\n            valid = false;\n        } else {\n            bean.setPickupMon(Integer.parseInt(formRequest.getParameter(\"pickupMonth\")));\n\n        }\n        if (isPickupYearNull()) {\n            valid = false;\n        }\n        if (!isPickupYearInRange()) {\n            valid = false;\n        } else {\n            bean.setPickupYear(Integer.parseInt(formRequest.getParameter(\"pickupYear\")));\n\n        }\n        if (isPickupHourNull()) {\n            valid = false;\n        }\n        if (!isPickupHourInRange()) {\n            valid = false;\n        } else {\n            bean.setPickupHour(Integer.parseInt(formRequest.getParameter(\"pickupHour\")));\n\n        }\n        if (isDropoffDayNull()) {\n            valid = false;\n        }\n        if (!isDropoffDayInRange()) {\n            valid = false;\n        } else {\n            bean.setDropoffDay(Integer.parseInt(formRequest.getParameter(\"dropoffDay\")));\n\n        }\n        if (isDropoffMonthNull()) {\n            valid = false;\n        }\n        if (!isDropoffMonthInRange()) {\n            valid = false;\n        } else {\n            bean.setDropoffMon(Integer.parseInt(formRequest.getParameter(\"dropoffMonth\")));\n\n        }\n        if (isDropoffYearNull()) {\n            valid = false;\n        }\n        if (!isDropoffYearInRange()) {\n            valid = false;\n        } else {\n            bean.setDropoffYear(Integer.parseInt(formRequest.getParameter(\"dropoffYear\")));\n\n        }\n        if (isDropoffHourNull()) {\n            valid = false;\n        }\n        if (!isDropoffHourInRange()) {\n            valid = false;\n        } else {\n            bean.setDropoffHour(Integer.parseInt(formRequest.getParameter(\"dropoffHour\")));\n\n        }\n        if (isCarTypeNull()) {\n            valid = false;\n        }\n        if (!isCarTypeInRange()) {\n            valid = false;\n        } else {\n            bean.setRentalType(formRequest.getParameter(\"cartype\"));\n\n        }\n        if (isCreditCardTypeNull()) {\n            valid = false;\n        }\n        if (!isCreditCardTypeInRange()) {\n            valid = false;\n        } else {\n            bean.setCardType(formRequest.getParameter(\"creditCardType\"));\n        }\n        if (isCreditCardNoNull()) {\n            valid = false;\n        }\n        if (!isCreditCardNoInRange()) {\n            valid = false;\n        } else {\n            bean.setCardNumber(formRequest.getParameter(\"creditCardNo\"));\n        }\n        return valid;\n    }\n\n    public void setErrorCodes(ArrayList<Integer> errorCodes) {\n        this.errorCodes = errorCodes;\n    }\n\n    public ArrayList<Integer> getErrorCodes() {\n        return errorCodes;\n    }\n\n    public boolean isCustomerNull() {\n        try {\n            if (formRequest.getParameter(\"customerNo\").isEmpty()) {\n                errorCodes.add(1011);\n                return true;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n        return false;\n    }\n\n    public boolean isCustomerNumeric() {\n        try {\n            Integer.valueOf(formRequest.getParameter(\"customerNo\"));\n        } catch (NumberFormatException e) {\n            errorCodes.add(1012);\n            return false;\n        }\n//        bean.setCustomerNumber(Integer.parseInt(formRequest.getParameter(\"customerNo\")));\n        return true;\n    }\n\n    public boolean isPickupDayNull() {\n        if (formRequest.getParameter(\"pickupDay\").isEmpty() || formRequest.getParameter(\"pickupDay\") == null) {\n            errorCodes.add(1021);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isPickupDayInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"pickupDay\")) < 1 || Integer.parseInt(formRequest.getParameter(\"pickupDay\")) > 31) {\n                errorCodes.add(1022);\n                return false;\n            }\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    //need to fix...test fail.\n    public boolean isPickupMonthNull() {\n        if (formRequest.getParameter(\"pickupMonth\").isEmpty() || formRequest.getParameter(\"pickupMonth\") == null) {\n            errorCodes.add(1031);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isPickupMonthInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"pickupMonth\")) < 1 || Integer.parseInt(formRequest.getParameter(\"pickupMonth\")) > 12) {\n                errorCodes.add(1032);\n                return false;\n            }\n//            bean.setPickupMon(Integer.parseInt(formRequest.getParameter(\"pickupMonth\")));\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isPickupYearNull() {\n        if (formRequest.getParameter(\"pickupYear\").isEmpty() || formRequest.getParameter(\"pickupYear\") == null) {\n            errorCodes.add(1041);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isPickupYearInRange() {\n        try {\n            if (formRequest.getParameter(\"pickupYear\").equalsIgnoreCase(\"2014\") || formRequest.getParameter(\"pickupYear\").equalsIgnoreCase(\"2015\")) {\n                return true;\n            } else {\n                errorCodes.add(1042);\n                return false;\n            }\n//            int pickupYear = Integer.parseInt(formRequest.getParameter(\"pickupYear\"));\n//            bean.setPickupYear(pickupYear);\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isPickupHourNull() {\n        if (formRequest.getParameter(\"pickupHour\").isEmpty() || formRequest.getParameter(\"pickupHour\") == null) {\n            errorCodes.add(1051);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isPickupHourInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"pickupHour\")) < 0 || Integer.parseInt(formRequest.getParameter(\"pickupHour\")) > 23) {\n                errorCodes.add(1052);\n                return false;\n            }\n//            bean.setPickupHour(Integer.parseInt(formRequest.getParameter(\"pickupHour\")));\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isDropoffDayNull() {\n        if (formRequest.getParameter(\"dropoffDay\").isEmpty() || formRequest.getParameter(\"dropoffDay\") == null) {\n            errorCodes.add(1061);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isDropoffDayInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"dropoffDay\")) < 1 || Integer.parseInt(formRequest.getParameter(\"dropoffDay\")) > 31) {\n                errorCodes.add(1062);\n                return false;\n            }\n//            bean.setDropoffDay(Integer.parseInt(formRequest.getParameter(\"dropoffDay\")));\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isDropoffMonthNull() {\n        if (formRequest.getParameter(\"dropoffMonth\").isEmpty() || formRequest.getParameter(\"dropoffMonth\") == null) {\n            errorCodes.add(1071);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isDropoffMonthInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"dropoffMonth\")) < 1 || Integer.parseInt(formRequest.getParameter(\"dropoffMonth\")) > 12) {\n                errorCodes.add(1072);\n                return false;\n            }\n//            bean.setDropoffMon(Integer.parseInt(formRequest.getParameter(\"dropoffMonth\")));\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isDropoffYearNull() {\n        if (formRequest.getParameter(\"dropoffYear\").isEmpty() || formRequest.getParameter(\"dropoffYear\") == null) {\n            errorCodes.add(1081);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isDropoffYearInRange() {\n        try {\n            if (formRequest.getParameter(\"dropoffYear\").equalsIgnoreCase(\"2014\") || formRequest.getParameter(\"dropoffYear\").equalsIgnoreCase(\"2015\")) {\n                return true;\n            } else {\n                errorCodes.add(1082);\n                return false;\n            }\n//            bean.setDropoffYear(Integer.parseInt(formRequest.getParameter(\"dropoffYear\")));\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isDropoffHourNull() {\n        if (formRequest.getParameter(\"dropoffHour\").isEmpty() || formRequest.getParameter(\"dropoffHour\") == null) {\n            errorCodes.add(1091);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isDropoffHourInRange() {\n        try {\n            if (Integer.parseInt(formRequest.getParameter(\"dropoffHour\")) < 0 || Integer.parseInt(formRequest.getParameter(\"dropoffHour\")) > 23) {\n                errorCodes.add(1092);\n                return false;\n            }\n//            bean.setDropoffHour(Integer.parseInt(formRequest.getParameter(\"dropoffHour\")));\n            return true;\n\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isCarTypeNull() {\n        if (formRequest.getParameter(\"cartype\").isEmpty() || formRequest.getParameter(\"cartype\") == null) {\n            errorCodes.add(1101);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isCarTypeInRange() {\n        if (formRequest.getParameter(\"cartype\").equalsIgnoreCase(\"economy\")\n                || formRequest.getParameter(\"cartype\").equalsIgnoreCase(\"standard\")\n                || formRequest.getParameter(\"cartype\").equalsIgnoreCase(\"luxury\")\n                || formRequest.getParameter(\"cartype\").equalsIgnoreCase(\"minivan\")) {\n            return true;\n        }\n        errorCodes.add(1102);\n        return false;\n//        bean.setDropoffHour(Integer.parseInt(formRequest.getParameter(\"dropoffHour\")));\n    }\n\n    public boolean isCreditCardTypeNull() {\n        if (formRequest.getParameter(\"creditCardType\").isEmpty() || formRequest.getParameter(\"creditCardType\") == null) {\n            errorCodes.add(1111);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isCreditCardTypeInRange() {\n        try {\n            if (formRequest.getParameter(\"creditCardType\").equalsIgnoreCase(\"visa\")\n                    || formRequest.getParameter(\"creditCardType\").equalsIgnoreCase(\"mastercard\")) {\n                return true;\n            } else {\n                errorCodes.add(1112);\n                return false;\n            }\n//            bean.setCardType(formRequest.getParameter(\"cerditCardType\"));\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean isCreditCardNoNull() {\n        if (formRequest.getParameter(\"creditCardNo\").isEmpty() || formRequest.getParameter(\"creditCardNo\") == null) {\n            errorCodes.add(1121);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isCreditCardNoInRange() {\n        String cardType = formRequest.getParameter(\"creditCardType\");\n        String cardNo = formRequest.getParameter(\"creditCardNo\").trim();\n\n        if (cardType.equalsIgnoreCase(\"visa\")) {\n            if (cardNo.charAt(0) == '4') {\n                if (cardNo.length() == 13 || cardNo.length() == 16) {\n                    return true;\n                }\n            } else {\n                errorCodes.add(1122);\n                return false;\n            }\n        } else if (cardType.equalsIgnoreCase(\"mastercard\")) {\n            if (!cardNo.startsWith(\"51\") || !cardNo.startsWith(\"52\") || !cardNo.startsWith(\"53\") || !cardNo.startsWith(\"54\") || !cardNo.startsWith(\"55\")) {\n                if (cardNo.length() != 16) {\n                    errorCodes.add(1122);\n                    return false;\n                }\n            } else {\n                return true;\n            }\n        }\n        return true;\n//        bean.setCardNumber(formRequest.getParameter(cardNo));\n    }\n\n    public RentalBean getBean() {\n        return bean;\n    }\n\n    public void setBean(RentalBean bean) {\n        this.bean = bean;\n    }\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,null,null,1,null,1,0,null,1,1,null,1,null,1,0,null,1,0,null,1,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,null,1,0,null,1,0,null,1,null,1,0,null,1,0,null,1,null,1,null,null,null,1,1,null,null,1,null,null,null,null,1,1,1,null,0,0,1,1,null,null,null,null,1,1,1,1,1,null,1,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,1,null,0,0,null,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,null,1,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,null,1,1,null,null,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,null,1,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,null,1,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,null,1,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,null,1,1,null,null,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,null,1,1,1,null,null,1,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,1,1,1,1,1,null,1,1,null,null,null,null,1,1,1,null,1,null,null,null,null,1,0,1,null,0,0,null,null,0,0,null,null,null,null,1,1,1,null,1,null,null,null,1,1,null,1,1,1,1,null,null,1,1,null,0,0,0,0,0,null,null,0,null,null,0,null,null,null,null,1,null,null,null,1,1,null,null],"name":"src/main/java/pricing/RentalFormValidator.java"},{"source":"/*\n *CarRates is used to represent the name of a class of rental car,\n *such as \"Compact\" and all associated prices (e.g. weekly rate, weekday rate)\n */\npackage pricing;\n\nimport java.io.Serializable;\nimport java.math.BigDecimal;\n\n/**\n *\n * @author junghun lee and julio tain sueiras\n */\npublic class PriceSchedule implements Serializable {\n     private String typeName;\n     private BigDecimal weekdayRate;\n     private BigDecimal weekendRate;\n     private BigDecimal weeklyRate;\n\n    public PriceSchedule(String typeName, BigDecimal weekdayRate, BigDecimal weekendRate, BigDecimal weeklyRate) {\n        this.typeName = typeName;\n        this.weekdayRate = weekdayRate;\n        this.weekendRate = weekendRate;\n        this.weeklyRate = weeklyRate;\n    }\n\n    public PriceSchedule() {\n    }\n\n    /**\n     * @return the typeName\n     */\n    public String getTypeName() {\n        return typeName;\n    }\n\n    /**\n     * @param typeName the typeName to set\n     */\n    public void setTypeName(String typeName) {\n        this.typeName = typeName;\n    }\n\n    /**\n     * @return the weekdayRate\n     */\n    public BigDecimal getWeekdayRate() {\n        return weekdayRate;\n    }\n\n    /**\n     * @param weekdayRate the weekdayRate to set\n     */\n    public void setWeekdayRate(BigDecimal weekdayRate) {\n        this.weekdayRate = weekdayRate;\n    }\n\n    /**\n     * @return the weekendRate\n     */\n    public BigDecimal getWeekendRate() {\n        return weekendRate;\n    }\n\n    /**\n     * @param weekendRate the weekendRate to set\n     */\n    public void setWeekendRate(BigDecimal weekendRate) {\n        this.weekendRate = weekendRate;\n    }\n\n    /**\n     * @return the weeklyRate\n     */\n    public BigDecimal getWeeklyRate() {\n        return weeklyRate;\n    }\n\n    /**\n     * @param weeklyRate the weeklyRate to set\n     */\n    public void setWeeklyRate(BigDecimal weeklyRate) {\n        this.weeklyRate = weeklyRate;\n    }\n\n    @Override\n    public String toString() {\n        return \"CarRates{\" + \"typeName=\" + typeName +\n                \", weekdayRate=\" + weekdayRate +\n                \", weekendRate=\" + weekendRate +\n                \", weeklyRate=\" + weeklyRate + '}';\n    }    \n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,null,1,1,null,null,null,null,null,0,null,null,null,null,null,null,0,0,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,1,null,null,null,null,null,null,1,1,null,null,null,null,null,0,null,null,null,null,null,null,1,1,null,null,null,0,null,null,null,null,null,null],"name":"src/main/java/pricing/PriceSchedule.java"}]}